/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/*!****************************!*\
  !*** ./assets/js/index.js ***!
  \****************************/
eval("//     import logger from './export.js'\n\n// document.addEventListener('DOMContentLoaded', () => {\n//     const BINDABLE_ATTR = 'data-bind';\n//     const BINDABLES     = document.querySelectorAll(`[${BINDABLE_ATTR}]`);\n\n//     /**\n//      * create our pairs, stored under the key of the BIND_TO\n//      * value in format:\n//      * * BIND_TO * => {'currentValue': *value*\n//      * 'inputFrom': '<input> element'\n//      * 'outputTo': '!'<input>' smth like h1/h2/smth else'}\n//      */\n//     const BINDABLE_PAIRS = (function (bindables, BINDABLE_ATTR) {\n//         this.bindablePairs = {};\n\n//         bindables.forEach(bindable => {\n//             const NEW_PAIR = {};\n//             const BIND_TO = bindable.getAttribute(`${BINDABLE_ATTR}`);\n            \n//             if (!this.bindablePairs.hasOwnProperty(BIND_TO)) {\n//                 this.bindablePairs[BIND_TO] = NEW_PAIR;\n//             }\n//             //check if it's input type text || its eg an h1/h2/smth else that is getting the value\n//             if (bindable.type === \"text\") {\n//                 this.bindablePairs[BIND_TO]['currentValue'] = bindable.value;\n//                 this.bindablePairs[BIND_TO]['inputFrom'] = bindable;\n//             } else {\n//                 this.bindablePairs[BIND_TO]['outputTo'] = bindable;\n//             }\n//         });\n\n//         return this.bindablePairs;\n//     })(BINDABLES, BINDABLE_ATTR);\n\n\n//     function isValidValue (newValue) {\n//         return newValue.length > 0 && (/\\S/.test(newValue));\n//     };\n\n//     for (let bindable of Object.keys(BINDABLE_PAIRS)) {\n//         BINDABLE_PAIRS[bindable].inputFrom.addEventListener('focusout', e => {\n//             if (isValidValue(e.target.value)) {\n//                 BINDABLE_PAIRS[bindable].outputTo.innerText = e.target.value;\n//             } else {\n//                 e.target.value = BINDABLE_PAIRS[bindable].currentValue; \n//             }\n//         });\n//     }\n\n\n//     const FOCUS_CLICK_ATTR = 'data-click-focus-target';\n//     const FOCUS_DESTINATION_ATTR = 'data-click-focus-destination';\n//     const FOCUS_CLICK_GROUP = document.querySelectorAll(`[${FOCUS_CLICK_ATTR}]`);\n    \n//     FOCUS_CLICK_GROUP.forEach(focusTriggeringElement => {\n//         focusTriggeringElement.addEventListener('click', e => {\n//             const FOCUS_DESTINATION_ATTR_VALUE = e.target.dataset.clickFocusTarget;\n//             const FOCUS_TARGET_ELEMENT         = document.querySelector(`[${FOCUS_DESTINATION_ATTR}=${FOCUS_DESTINATION_ATTR_VALUE}]`);\n//                 FOCUS_TARGET_ELEMENT.focus();\n//                 FOCUS_TARGET_ELEMENT.select();\n//             ;\n//             }\n//         )\n//     });\n\n//     //grow input\n\n//     //we need to resize input as the user is typing, to keep it aesthetical, we need to think about the size of each char :/\n\n//     function BoardHeading (heading, input) {\n//             this.heading = heading;\n//             this.input = input;\n//             this.headingClone;\n\n//             this.cloneHeading = function () {\n//                 console.log(this)\n//                 return this.headingClone = this.heading.cloneNode(true);\n//             };\n\n//             this.hideHeading = function () {\n//                 this.headingClone.setAttribute(\"style\", \"position: absolute; color: transparent; z-index: -5;\");\n//             }\n\n//             this.adjustElementSize = function () {\n//                 this.input.style.width = (this.headingClone.getBoundingClientRect()).width + 'px';\n//                 return this;\n//             }\n\n//             this.insertClonedHeading = function () {\n//                 this.input.insertAdjacentElement('afterend', this.headingClone);\n//                 return this;\n//             }\n\n//             this.replaceSpaceWithNBSP = function () {\n//                 this.headingClone.innerHTML = this.input.value.replace(/\\s/g, '&nbsp;');\n//             }\n\n\n//             // return {\n//             //     cloneInput: cloneInput,\n//             //     adjustElementSize: adjustElementSize,\n//             //     insertClonedInput: insertClonedInput,\n//             //     replaceSpaceWithNBSP: replaceSpaceWithNBSP\n//             // }\n\n\n//     }\n\n//     const GROW_INPUT_ELEMENT    =  document.querySelector('[data-grow-input]');\n//     const INPUT_REFERENCE       = document.querySelector('[data-grow-input-reference]');\n//     const boardHeading = new BoardHeading(INPUT_REFERENCE, GROW_INPUT_ELEMENT);\n// console.log(boardHeading)\n//     // const INPUT_REFERENCE_CLONE = INPUT_REFERENCE.cloneNode(true);\n//     boardHeading.cloneHeading();\n//     boardHeading.hideHeading();\n//     boardHeading.insertClonedHeading();\n//     boardHeading.adjustElementSize();\n\n//     // INPUT_REFERENCE_CLONE.setAttribute(\"style\", \"position: absolute; color: transparent; z-index: -5;\")\n//     // INPUT_REFERENCE.insertAdjacentElement('afterend', INPUT_REFERENCE_CLONE);\n    \n//     // GROW_INPUT_ELEMENT.style.width = (INPUT_REFERENCE_CLONE.getBoundingClientRect()).width + 'px';\n\n//     GROW_INPUT_ELEMENT.addEventListener('input', e => {\n//         boardHeading.replaceSpaceWithNBSP();\n//         boardHeading.adjustElementSize();\n//     });\n\n    \n// });\n\n\ndocument.addEventListener(\"DOMContentLoaded\", function (e) {\n  const BINDABLE_ATTR = \"data-bind\";\n  const BINDABLES = document.querySelectorAll(`[${BINDABLE_ATTR}]`);\n\n  /**\n   * create our pairs, stored under the key of the BIND_TO\n   * value in format:\n   * * BIND_TO * => {'currentValue': *value*\n   * 'inputFrom': '<input> element'\n   * 'outputTo': '!'<input>' smth like h1/h2/smth else'}\n   */\n  const BINDABLE_PAIRS = (function (bindables, BINDABLE_ATTR) {\n    const bindablePairs = {};\n\n    bindables.forEach((bindable) => {\n      const NEW_PAIR = {};\n      const BIND_TO = bindable.getAttribute(`${BINDABLE_ATTR}`);\n\n      if (!bindablePairs.hasOwnProperty(BIND_TO)) {\n        bindablePairs[BIND_TO] = NEW_PAIR;\n      }\n      //check if it's input type text || its eg an h1/h2/smth else that is getting the value\n      if (bindable.type === \"text\") {\n        bindablePairs[BIND_TO][\"currentValue\"] = bindable.value;\n        bindablePairs[BIND_TO][\"inputFrom\"] = bindable;\n      } else {\n        bindablePairs[BIND_TO][\"outputTo\"] = bindable;\n      }\n    });\n\n    return bindablePairs;\n  })(BINDABLES, BINDABLE_ATTR);\n\n  function isValidValue(newValue) {\n    return newValue.length > 0 && /\\S/.test(newValue);\n  }\n\n  for (let bindable of Object.keys(BINDABLE_PAIRS)) {\n    BINDABLE_PAIRS[bindable].inputFrom.addEventListener(\"focusout\", (e) => {\n      if (isValidValue(e.target.value)) {\n        BINDABLE_PAIRS[bindable].outputTo.innerText = e.target.value;\n      } else {\n        e.target.value = BINDABLE_PAIRS[bindable].currentValue;\n      }\n    });\n  }\n\n  console.log(BINDABLE_PAIRS)\n\n\n\n\n\n  class BoardTitle extends HTMLHeadingElement {\n    constructor () {\n      super();\n    }\n  \n    updateBoardTitle (title) {\n      this.innerText = title;\n    }\n  }\n  \n  class BoardTitleClone extends HTMLHeadingElement {\n    constructor () {\n      super();\n      this.hide();\n    }\n  \n  \n    hide () {\n      this.setAttribute(\"style\", \"position: absolute; color: transparent; z-index: -5;\");\n      this.hidden = true;\n  \n      return this;\n    }\n  }\n  \n  \n  customElements.define('board-title', BoardTitle, {extends: \"h1\"})\n  customElements.define('board-title-clone', BoardTitleClone, {extends: \"h1\"})\n\n  // new BoardTitleInput()\n});\n\n\n\n//# sourceURL=webpack://v-trello/./assets/js/index.js?");
/******/ })()
;